#include <stdio.h>
#include <stdbool.h>

#define MAX 10
#define RESOURCES 3
#define PROCESSES 5

int allocation[PROCESSES][RESOURCES] = { {0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2} };
int max[PROCESSES][RESOURCES] = { {0, 1, 0}, {2, 0, 2}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2} };
int available[RESOURCES] = {3, 3, 2};
int need[PROCESSES][RESOURCES];

void calculateNeed() {
    for (int i = 0; i < PROCESSES; i++)
        for (int j = 0; j < RESOURCES; j++)
            need[i][j] = max[i][j] - allocation[i][j];
}

bool isSafe() {
    int work[RESOURCES];
    bool finish[PROCESSES] = {0};
    for (int i = 0; i < RESOURCES; i++)
        work[i] = available[i];

    int count = 0;
    while (count < PROCESSES) {
        bool found = false;
        for (int p = 0; p < PROCESSES; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < RESOURCES; j++)
                    if (need[p][j] > work[j])
                        break;

                if (j == RESOURCES) {
                    for (int k = 0; k < RESOURCES; k++)
                        work[k] += allocation[p][k];
                    finish[p] = true;
                    found = true;
                    count++;
                }
            }
        }
        if (!found)
            break;
    }
    return count == PROCESSES;
}

int main() {
    calculateNeed();
    if (isSafe())
        printf("The system is in a safe state.\n");
    else
        printf("The system is not in a safe state.\n");
    return 0;
}
